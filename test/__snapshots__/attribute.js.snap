// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`generate attribute for mixed modes (global, static, dynamic) 1`] = `
"import _JSXStyle from 'styled-jsx/style';
import styles from './styles';

const styles2 = require('./styles2');

// external only
export const Test1 = () => <div className={\`jsx-\${styles.__scopedHash} jsx-\${styles2.__scopedHash}\`}>
    <p className={\`jsx-\${styles.__scopedHash} jsx-\${styles2.__scopedHash}\`}>external only</p>
    <_JSXStyle styleId={styles.__scopedHash} css={styles.__scoped} />
    <_JSXStyle styleId={styles2.__scopedHash} css={styles2.__scoped} />
  </div>;

// external and static
export const Test2 = () => <div className={'jsx-2982525546 ' + \`jsx-\${styles.__scopedHash}\`}>
    <p className={'jsx-2982525546 ' + \`jsx-\${styles.__scopedHash}\`}>external and static</p>
    <_JSXStyle styleId={\\"2982525546\\"} css={\\"p.jsx-2982525546{color:red;}\\"} />
    <_JSXStyle styleId={styles.__scopedHash} css={styles.__scoped} />
  </div>;

// external and dynamic
export const Test3 = ({ color }) => <div className={\`jsx-\${styles.__scopedHash}\` + ' ' + _JSXStyle.dynamic([['1947484460', [color]]])}>
    <p className={\`jsx-\${styles.__scopedHash}\` + ' ' + _JSXStyle.dynamic([['1947484460', [color]]])}>external and dynamic</p>
    <_JSXStyle styleId={\\"1947484460\\"} css={\`p.__jsx-style-dynamic-selector{color:\${color};}\`} dynamic={[color]} />
    <_JSXStyle styleId={styles.__scopedHash} css={styles.__scoped} />
  </div>;

// external, static and dynamic
export const Test4 = ({ color }) => <div className={\`jsx-\${styles.__scopedHash}\` + ' jsx-3190985107 ' + _JSXStyle.dynamic([['1336444426', [color]]])}>
    <p className={\`jsx-\${styles.__scopedHash}\` + ' jsx-3190985107 ' + _JSXStyle.dynamic([['1336444426', [color]]])}>external, static and dynamic</p>
    <_JSXStyle styleId={\\"3190985107\\"} css={\\"p.jsx-3190985107{display:inline-block;}\\"} />
    <_JSXStyle styleId={\\"1336444426\\"} css={\`p.__jsx-style-dynamic-selector{color:\${color};}\`} dynamic={[color]} />
    <_JSXStyle styleId={styles.__scopedHash} css={styles.__scoped} />
  </div>;

// static only
export const Test5 = () => <div className={\\"jsx-1372669040\\"}>
    <p className={\\"jsx-1372669040\\"}>static only</p>
    <_JSXStyle styleId={\\"3190985107\\"} css={\\"p.jsx-1372669040{display:inline-block;}\\"} />
    <_JSXStyle styleId={\\"2982525546\\"} css={\\"p.jsx-1372669040{color:red;}\\"} />
  </div>;

// static and dynamic
export const Test6 = ({ color }) => <div className={'jsx-3190985107 ' + _JSXStyle.dynamic([['1336444426', [color]]])}>
    <p className={'jsx-3190985107 ' + _JSXStyle.dynamic([['1336444426', [color]]])}>static and dynamic</p>
    <_JSXStyle styleId={\\"3190985107\\"} css={\\"p.jsx-3190985107{display:inline-block;}\\"} />
    <_JSXStyle styleId={\\"1336444426\\"} css={\`p.__jsx-style-dynamic-selector{color:\${color};}\`} dynamic={[color]} />
  </div>;

// dynamic only
export const Test7 = ({ color }) => <div className={_JSXStyle.dynamic([['1947484460', [color]]])}>
    <p className={_JSXStyle.dynamic([['1947484460', [color]]])}>dynamic only</p>
    <_JSXStyle styleId={\\"1947484460\\"} css={\`p.__jsx-style-dynamic-selector{color:\${color};}\`} dynamic={[color]} />
  </div>;

// dynamic with scoped compound variable
export const Test8 = ({ color }) => {
  if (color) {
    const innerProps = { color };

    return <div className={_JSXStyle.dynamic([['1791723528', [innerProps.color]]])}>
        <p className={_JSXStyle.dynamic([['1791723528', [innerProps.color]]])}>dynamic with scoped compound variable</p>
        <_JSXStyle styleId={\\"1791723528\\"} css={\`p.__jsx-style-dynamic-selector{color:\${innerProps.color};}\`} dynamic={[innerProps.color]} />
      </div>;
  }
};

// dynamic with compound variable
export const Test9 = ({ color }) => {
  const innerProps = { color };

  return <div className={_JSXStyle.dynamic([['248922593', [innerProps.color]]])}>
      <p className={_JSXStyle.dynamic([['248922593', [innerProps.color]]])}>dynamic with compound variable</p>
      <_JSXStyle styleId={\\"248922593\\"} css={\`p.__jsx-style-dynamic-selector{color:\${innerProps.color};}\`} dynamic={[innerProps.color]} />
    </div>;
};

const foo = 'red';

// dynamic with constant variable
export const Test10 = () => <div className={\\"jsx-461505126\\"}>
    <p className={\\"jsx-461505126\\"}>dynamic with constant variable</p>
    <_JSXStyle styleId={\\"461505126\\"} css={\`p.jsx-461505126{color:\${foo};}\`} />
  </div>;

// dynamic with complex scope
export const Test11 = ({ color }) => {
  const items = Array.from({ length: 5 }).map((item, i) => <li key={i} className={_JSXStyle.dynamic([['2172653867', [color]]]) + ' ' + 'item'}>
      <_JSXStyle styleId={\\"2172653867\\"} css={\`.item.__jsx-style-dynamic-selector{color:\${color};}\`} dynamic={[color]} />
      Item #{i + 1}
    </li>);

  return <ul className=\\"items\\">{items}</ul>;
};"
`;

exports[`rewrites className 1`] = `
"var _this = this;

import _JSXStyle from \\"styled-jsx/style\\";
export default (() => <div className={\\"jsx-2886504620\\"}>
    <div {...test.test} className={\\"jsx-2886504620\\" + \\" \\" + (test.test.className != null && test.test.className || \\"test\\")} />
    <div {...test.test.test} className={\\"jsx-2886504620\\" + \\" \\" + (test.test.test.className != null && test.test.test.className || \\"test\\")} />
    <div {..._this.test.test} className={\\"jsx-2886504620\\" + \\" \\" + (_this.test.test.className != null && _this.test.test.className || \\"test\\")} />
    <div data-test=\\"test\\" className={\\"jsx-2886504620\\"} />
    <div className={\\"jsx-2886504620\\" + \\" \\" + \\"test\\"} />
    <div className={\\"jsx-2886504620\\" + \\" \\" + 'test'} />
    <div className={\\"jsx-2886504620\\" + \\" \\" + \`test\`} />
    <div className={\\"jsx-2886504620\\" + \\" \\" + \`test\${true ? ' test2' : ''}\`} />
    <div className={\\"jsx-2886504620\\" + \\" \\" + ('test ' + test || \\"\\")} />
    <div className={\\"jsx-2886504620\\" + \\" \\" + (['test', 'test2'].join(' ') || \\"\\")} />
    <div className={\\"jsx-2886504620\\" + \\" \\" + (true && 'test' || \\"\\")} />
    <div className={\\"jsx-2886504620\\" + \\" \\" + ((test ? 'test' : null) || \\"\\")} />
    <div className={\\"jsx-2886504620\\" + \\" \\" + (test || \\"\\")} />
    <div className={\\"jsx-2886504620\\" + \\" \\" + (test && 'test' || \\"\\")} />
    <div className={\\"jsx-2886504620\\" + \\" \\" + (test && test('test') || \\"\\")} />
    <div className={\\"jsx-2886504620\\" + \\" \\" + (undefined || \\"\\")} />
    <div className={\\"jsx-2886504620\\" + \\" \\" + (null || \\"\\")} />
    <div className={\\"jsx-2886504620\\" + \\" \\" + (false || \\"\\")} />
    <div data-test className={\\"jsx-2886504620\\" + \\" \\" + 'test'} />
    <div data-test className={\\"jsx-2886504620\\" + \\" \\" + 'test'} />
    <div data-test=\\"test\\" className={\\"jsx-2886504620\\" + \\" \\" + 'test'} />
    <div {...props} className={\\"jsx-2886504620\\" + \\" \\" + (props.className != null && props.className || 'test')} />
    <div {...props} {...rest} className={\\"jsx-2886504620\\" + \\" \\" + (rest.className != null && rest.className || props.className != null && props.className || 'test')} />
    <div {...props} className={\\"jsx-2886504620\\" + \\" \\" + (props.className != null && props.className || \`test \${test ? 'test' : ''}\`)} />
    <div {...props} className={\\"jsx-2886504620\\" + \\" \\" + (props.className != null && props.className || test && test('test') || \\"\\")} />
    <div {...props} className={\\"jsx-2886504620\\" + \\" \\" + (props.className != null && props.className || test && test('test') && 'test' || \\"\\")} />
    <div {...props} className={\\"jsx-2886504620\\" + \\" \\" + (props.className != null && props.className || test && test('test') && test2('test') || \\"\\")} />
    <div {...props} className={\\"jsx-2886504620\\" + \\" \\" + 'test'} />
    <div {...props} {...rest} className={\\"jsx-2886504620\\" + \\" \\" + 'test'} />
    <div {...props} {...rest} className={\\"jsx-2886504620\\" + \\" \\" + (rest.className != null && rest.className || 'test')} />
    <div {...props} className={\\"jsx-2886504620\\" + \\" \\" + (props.className != null && props.className || \\"\\")} />
    <div {...props} {...rest} className={\\"jsx-2886504620\\" + \\" \\" + (rest.className != null && rest.className || props.className != null && props.className || \\"\\")} />
    <div {...props} data-foo {...rest} className={\\"jsx-2886504620\\" + \\" \\" + (rest.className != null && rest.className || props.className != null && props.className || \\"\\")} />
    <div {...props} data-foo {...rest} className={\\"jsx-2886504620\\" + \\" \\" + (rest.className != null && rest.className || 'test')} />
    <_JSXStyle styleId={\\"2886504620\\"} css={\\"div.jsx-2886504620{color:red;}\\"} />
  </div>);"
`;
